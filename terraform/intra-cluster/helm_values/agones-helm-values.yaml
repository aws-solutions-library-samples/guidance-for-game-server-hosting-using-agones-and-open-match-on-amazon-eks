## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
## SPDX-License-Identifier: MIT-0

# Declare variables to be passed into your templates.

agones:
  featureGates: "PlayerTracking=true"
  metrics:
    prometheusEnabled: true
    prometheusServiceDiscovery: true
    stackdriverEnabled: false
    stackdriverProjectID: ""
    stackdriverLabels: ""
    serviceMonitor:
      enabled: false
      interval: 30s
  rbacEnabled: true
  registerServiceAccounts: true
  registerWebhooks: true
  registerApiService: true
  crds:
    install: true
    cleanupOnDelete: true
  serviceaccount:
    allocator:
      name: agones-allocator
      annotations: {}
    controller:
      name: agones-controller
      annotations: {}
    sdk:
      name: agones-sdk
      annotations: {}
  createPriorityClass: true
  priorityClassName: agones-system
  controller:
    resources: {}
    # requests:
    #   cpu: 1
    #   memory: 256Mi
    nodeSelector: {}
    annotations: {}
    tolerations:
      - key: "agones.dev/agones-system"
        operator: "Equal"
        value: "true"
        effect: "NoExecute"
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: agones.dev/agones-system
              operator: Exists
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: agones-controller
              operator: In
              values: ["true"]
          topologyKey: topology.kubernetes.io/zone
        # preferredDuringSchedulingIgnoredDuringExecution:
        #   - weight: 1
        #     preference:
        #       matchExpressions:
        #         - key: "agones.dev/agones-system"
        #           operator: Exists
    generateTLS: true
    tlsCert: ""
    tlsKey: ""
    disableSecret: true
    allocationApiService:
      annotations: {'cert-manager.io/inject-ca-from': 'agones-system/agones-cert'}
      disableCaBundle: true
    validatingWebhook:
      annotations: {'cert-manager.io/inject-ca-from': 'agones-system/agones-cert'}
      disableCaBundle: true
    mutatingWebhook:
      annotations: {'cert-manager.io/inject-ca-from': 'agones-system/agones-cert'}
      disableCaBundle: true
    customCertSecretPath:
      - key: "ca.crt"
        path: "ca.crt"
      - key: "tls.crt"
        path: "server.crt"
      - key: "tls.key"
        path: "server.key"
    safeToEvict: false
    persistentLogs: true
    persistentLogsSizeLimitMB: 10000
    logLevel: info
    numWorkers: 100
    apiServerQPS: 400
    apiServerQPSBurst: 500
    http:
      port: 8080
    healthCheck:
      initialDelaySeconds: 3
      periodSeconds: 3
      failureThreshold: 3
      timeoutSeconds: 1
  extensions:
    resources: { }
    # requests:
    #   cpu: 1
    #   memory: 256Mi
    nodeSelector: { }
    annotations: { }
    tolerations:
      - key: "agones.dev/agones-system"
        operator: "Equal"
        value: "true"
        effect: "NoExecute"
    generateTLS: true
    tlsCert: ""
    tlsKey: ""
    disableSecret: true
    allocationApiService:
      annotations: { 'cert-manager.io/inject-ca-from': 'agones-system/agones-cert' }
      disableCaBundle: true
    validatingWebhook:
      annotations: { 'cert-manager.io/inject-ca-from': 'agones-system/agones-cert' }
      disableCaBundle: true
    mutatingWebhook:
      annotations: { 'cert-manager.io/inject-ca-from': 'agones-system/agones-cert' }
      disableCaBundle: true
    customCertSecretPath:
      - key: "ca.crt"
        path: "ca.crt"
      - key: "tls.crt"
        path: "server.crt"
      - key: "tls.key"
        path: "server.key"
    persistentLogs: true
    persistentLogsSizeLimitMB: 10000
    logLevel: info
    numWorkers: 100
    apiServerQPS: 400
    apiServerQPSBurst: 500
    http:
      port: 8080
    healthCheck:
      initialDelaySeconds: 3
      periodSeconds: 3
      failureThreshold: 3
      timeoutSeconds: 1
    allocationBatchWaitTime: 500ms
    pdb:
      minAvailable: 1
    replicas: 1
    readiness:
      initialDelaySeconds: 3
      periodSeconds: 3
      failureThreshold: 3
  ping:
    install: true
    resources: {}
    # requests:
    #   cpu: 1
    #   memory: 256Mi
    nodeSelector: {}
    annotations: {}
    tolerations:
      - key: "agones.dev/agones-system"
        operator: "Equal"
        value: "true"
        effect: "NoExecute"
    affinity:
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
                - key: "agones.dev/agones-system"
                  operator: Exists
    replicas: 1
    http:
      expose: true
      response: ok
      port: 80
      serviceType: LoadBalancer
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      annotations: {}
    udp:
      expose: true
      rateLimit: 20
      port: 50000
      serviceType: LoadBalancer
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      annotations: {}
    healthCheck:
      initialDelaySeconds: 3
      periodSeconds: 3
      failureThreshold: 3
      timeoutSeconds: 1
  allocator:
    install: true
    apiServerQPS: 400
    apiServerQPSBurst: 500
    logLevel: info
    annotations: {}
    resources: {}
    # requests:
    #   cpu: 1
    #   memory: 256Mi
    healthCheck:
      initialDelaySeconds: 3
      periodSeconds: 3
      failureThreshold: 3
      timeoutSeconds: 1
    tolerations:
      - key: "agones.dev/agones-system"
        operator: "Equal"
        value: "true"
        effect: "NoExecute"
    affinity:
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
                - key: "agones.dev/agones-system"
                  operator: Exists
    replicas: 1
    service:
      name: agones-allocator
      serviceType: LoadBalancer
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      # Disabled because makes LoadBalancer unresponsive, need to investigate further
      # annotations: { 'service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol': 'http', 'service.beta.kubernetes.io/aws-load-balancer-healthcheck-path': '/live',  'service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval':'10' }
      # annotations:
      #   {
      #     'service.beta.kubernetes.io/aws-load-balancer-name': 'agones-allocator-lb'
      #   }
      http:
        enabled: true
        port: 443
        portName: https
        targetPort: 8443
        nodePort: 0 # nodePort will be used if the serviceType is set to NodePort
      grpc:
        enabled: true
        port: 443
        portName: grpc
        targetPort: 8443
        nodePort: 0 # nodePort will be used if the serviceType is set to NodePort
    serviceMetrics:
      name: agones-allocator-metrics-service
      annotations: {}
      http:
        enabled: true
        port: 8080
        portName: http
    disableSecretCreation: false
    generateTLS: true
    tlsCert: ""
    tlsKey: ""
    generateClientTLS: true
    clientCAs: {}
    disableMTLS: false
    disableTLS: false
    remoteAllocationTimeout: 10s
    totalRemoteAllocationTimeout: 30s
  image:
    # registry: us-docker.pkg.dev/agones-images/release
    # tag: 1.33.0
    controller:
      name: agones-controller
      pullPolicy: IfNotPresent
    sdk:
      name: agones-sdk
      cpuRequest: 30m
      cpuLimit: 0
      memoryRequest: 0
      memoryLimit: 0
      alwaysPull: false
    ping:
      name: agones-ping
      pullPolicy: IfNotPresent
    extensions:
      name: agones-extensions
      pullPolicy: IfNotPresent
    allocator:
      name: agones-allocator
      pullPolicy: IfNotPresent

gameservers:
  namespaces:
    - default
    - gameservers
  minPort: 7000
  maxPort: 7029
  podPreserveUnknownFields: false

helm:
  installTests: false
