AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS CloudFormation template for guidance for game server hosting using agones and open match on amazon eks"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Agones Open Match EKS (AGOE) Configuration"
        Parameters:
          - VpcCIDR
          - PublicSubnetCIDR
          - RepositoryLocation
          - Cluster1Name
          - Cluster1Region
          - Cluster1CIDR
          - Cluster2Name
          - Cluster2Region
          - Cluster2CIDR
          - KubernetesVersion
    ParameterLabels:
      VpcCIDR:
        default: "AGOE VPC CIDR"
      PublicSubnetCIDR:
        default: "AGOE Public Subnet CIDR"
      RepositoryLocation:
        default: "AGOE Repository Location"
      Cluster1Name:
        default: "AGOE Cluster 1 Name"
      Cluster1Region:
        default: "AGOE Cluster 1 Region"
      Cluster1CIDR:
        default: "AGOE Cluster 1 CIDR"
      Cluster2Name:
        default: "AGOE Cluster 2 Name"
      Cluster2Region:
        default: "AGOE Cluster 2 Region"
      Cluster2CIDR:
        default: "AGOE Cluster 2 CIDR"
      KubernetesVersion:
        default: "AGOE Kubernetes Version"
      CodeStarConnectionArn:
        default: "AGOE CodeStar Connection ARN"
      RepositoryOwner:
        default: "AGOE Repository Owner"
      RepositoryName:
        default: "AGOE Repository Name"

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.192.0.0/16
  PublicSubnetCIDR:
    Type: String
    Default: 10.192.10.0/24
  CodeStarConnectionArn:
    Type: String
    Description: CodeStar connection ARN for GitHub.
  RepositoryLocation:
    Type: String
    Description: The location of the GitHub repository
  Cluster1Name:
    Type: String
    Default: agones-gameservers-1
    Description: Name of the first EKS cluster
  Cluster1Region:
    Type: String
    Default: us-east-1
    Description: Region for the first EKS cluster
  Cluster1CIDR:
    Type: String
    Default: "10.1.0.0/16"
    Description: CIDR block for the first EKS cluster VPC
  Cluster2Name:
    Type: String
    Default: agones-gameservers-2
    Description: Name of the second EKS cluster
  Cluster2Region:
    Type: String
    Default: us-east-2
    Description: Region for the second EKS cluster
  Cluster2CIDR:
    Type: String
    Default: "10.2.0.0/16"
    Description: CIDR block for the second EKS cluster VPC
  KubernetesVersion:
    Type: String
    Default: "1.28"
    Description: Kubernetes version for the EKS clusters
  RepositoryOwner:
    Type: String
    Description: The owner of the Git repository
  RepositoryName:
    Type: String
    Default: guidance-for-game-server-hosting-using-agones-and-open-match-on-amazon-eks
    Description: The name of the Git repository

Resources:
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub AGOE-CodeBuild-${AWS::AccountId}-${AWS::Region}
      Artifacts:
        Type: S3
        Location: !Ref CodeBuildArtifactsBucket
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        EnvironmentVariables:
          - Name: TERRAFORM_STATE_BUCKET
            Type: PLAINTEXT
            Value: !Ref TerraformStateBucket
          - Name: TERRAFORM_DYNAMO_TABLE
            Value: !Ref TerraformDynamoDBLockTable
          - Name: CLUSTER1
            Value: !Ref Cluster1Name
          - Name: REGION1
            Value: !Ref Cluster1Region
          - Name: CIDR1
            Value: !Ref Cluster1CIDR
          - Name: CLUSTER2
            Value: !Ref Cluster2Name
          - Name: REGION2
            Value: !Ref Cluster2Region
          - Name: CIDR2
            Value: !Ref Cluster2CIDR
          - Name: VERSION
            Value: !Ref KubernetesVersion
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: GITHUB
        Location: !Ref RepositoryLocation
        BuildSpec: |
          version: 0.2
          env:
            variables:
              REGION: $AWS_REGION
              MAX_RETRIES: 5
              RETRY_DELAY: 5
          phases:
            install:
              commands:
                - echo Installing dependencies...
                - sudo yum install -y yum-utils shadow-utils
                - sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
                - sudo yum -y install terraform
                - terraform --version

                - echo "Installing Helm..."
                - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
                - chmod 700 get_helm.sh
                - ./get_helm.sh
                - helm version

                - echo "Installing jq..."
                - sudo yum install -y jq

                - echo Installing GetText...
                - sudo yum install -y gettext
                - gettext --version

                - echo Installing Go...
                - sudo yum install -y golang
                - go version

                - echo "Installing kubectl..."
                - curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.0/2023-04-19/bin/linux/amd64/kubectl
                - chmod +x ./kubectl
                - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
                - echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
                - kubectl version --short --client

                - echo "Checking Docker version..."
                - docker version

                - echo "Checking OpenSSL version..."
                - openssl version

            pre_build:
              commands:
                - echo Checking out repositories...
                - echo "Listing contents of CODEBUILD_SRC_DIR"
                - ls -la $CODEBUILD_SRC_DIR
            build:
              commands:
                - echo "Initializing Terraform for cluster creation..."
                - terraform -chdir=terraform/cluster init

                - echo "Creating both clusters..."
                - |
                  terraform -chdir=terraform/cluster apply -auto-approve \
                    -var="cluster_1_name=${CLUSTER1}" \
                    -var="cluster_1_region=${REGION1}" \
                    -var="cluster_1_cidr=${CIDR1}" \
                    -var="cluster_2_name=${CLUSTER2}" \
                    -var="cluster_2_region=${REGION2}" \
                    -var="cluster_2_cidr=${CIDR2}" \
                    -var="cluster_version=${VERSION}"
                

                - echo "Step 2 - Terraform Intra-Cluster"
                - echo "Initializing Terraform for intra-cluster configuration..."
                - terraform -chdir=terraform/intra-cluster init

                - echo "Deploying to the first cluster (${CLUSTER1})..."
                - |
                  terraform -chdir=terraform/intra-cluster workspace select -or-create=true ${REGION1} &&
                  terraform -chdir=terraform/intra-cluster apply -auto-approve \
                    -var="cluster_name=${CLUSTER1}" \
                    -var="cluster_region=${REGION1}" \
                    -var="cluster_endpoint=$(terraform -chdir=terraform/cluster output -raw cluster_1_endpoint)" \
                    -var="cluster_certificate_authority_data=$(terraform -chdir=terraform/cluster output -raw cluster_1_certificate_authority_data)" \
                    -var="cluster_token=$(terraform -chdir=terraform/cluster output -raw cluster_1_token)" \
                    -var="cluster_version=${VERSION}" \
                    -var="oidc_provider_arn=$(terraform -chdir=terraform/cluster output -raw oidc_provider_1_arn)" \
                    -var="namespaces=[\"agones-openmatch\", \"agones-system\", \"gameservers\", \"open-match\"]" \
                    -var="configure_agones=true" \
                    -var="configure_open_match=true"

                - echo "Deploying to the second cluster (${CLUSTER2})..."
                - |
                  terraform -chdir=terraform/intra-cluster workspace select -or-create=true ${REGION2} &&
                  terraform -chdir=terraform/intra-cluster apply -auto-approve \
                    -var="cluster_name=${CLUSTER2}" \
                    -var="cluster_region=${REGION2}" \
                    -var="cluster_endpoint=$(terraform -chdir=terraform/cluster output -raw cluster_2_endpoint)" \
                    -var="cluster_certificate_authority_data=$(terraform -chdir=terraform/cluster output -raw cluster_2_certificate_authority_data)" \
                    -var="cluster_token=$(terraform -chdir=terraform/cluster output -raw cluster_2_token)" \
                    -var="cluster_version=${VERSION}" \
                    -var="oidc_provider_arn=$(terraform -chdir=terraform/cluster output -raw oidc_provider_2_arn)" \
                    -var="namespaces=[\"agones-system\", \"gameservers\"]" \
                    -var="configure_agones=true" \
                    -var="configure_open_match=false"

                - echo "Fetching the load balancer ARN..."

                - echo "Updating kubeconfig for Cluster 1..."
                - aws eks --region ${REGION1} update-kubeconfig --name ${CLUSTER1}
                - kubectl config use-context arn:aws:eks:${REGION1}:$(aws sts get-caller-identity --query Account --output text):cluster/${CLUSTER1}

                - echo "Verifying current context..."
                - kubectl config current-context

                - echo "Setting the Open Match service name"
                - export OPEN_MATCH_SVC_NAME=$CLUSTER1-om-fe
                - echo "OPEN_MATCH_SVC_NAME=$OPEN_MATCH_SVC_NAME"
                
                - echo "Setting the name of the Load balancer"
                - |
                  export FLB_NAME=$(kubectl get services -n open-match -o json | jq -r --arg OPEN_MATCH_SVC_NAME "$OPEN_MATCH_SVC_NAME" '.items[] | select(.metadata.name==$OPEN_MATCH_SVC_NAME) | .status.loadBalancer.ingress[0].hostname')
                - echo "FLB_NAME=$FLB_NAME"
                
                - echo "Retrieving the ARN of the load balancer"
                - |
                  export FLB_ARN=$(aws elbv2 describe-load-balancers --region ${REGION1} | jq -r ".LoadBalancers[] | select(.DNSName==\"$FLB_NAME\") | .LoadBalancerArn")
                - echo "FLB_ARN=$FLB_ARN"

                - echo "Initializing Terraform for extra-cluster configuration"
                - terraform -chdir=terraform/extra-cluster init

                - echo "Getting values needed by Terraform"
                - export VPC1=$(terraform -chdir=terraform/cluster output -raw vpc_1_id)
                - export SUBNETS1=$(terraform -chdir=terraform/cluster output gameservers_1_subnets)
                - export ROUTE1=$(terraform -chdir=terraform/cluster output -raw private_route_table_1_id)
                - export ENDPOINT1=$(terraform -chdir=terraform/cluster output -raw cluster_2_endpoint)
                - export AUTH1=$(terraform -chdir=terraform/cluster output -raw cluster_1_certificate_authority_data)
                - export TOKEN1=$(terraform -chdir=terraform/cluster output -raw cluster_1_token)
                - export VPC2=$(terraform -chdir=terraform/cluster output -raw vpc_2_id)
                - export SUBNETS2=$(terraform -chdir=terraform/cluster output gameservers_2_subnets)
                - export ROUTE2=$(terraform -chdir=terraform/cluster output -raw private_route_table_2_id)
                - export ENDPOINT2=$(terraform -chdir=terraform/cluster output -raw cluster_2_endpoint)
                - export AUTH2=$(terraform -chdir=terraform/cluster output -raw cluster_2_certificate_authority_data)
                - export TOKEN2=$(terraform -chdir=terraform/cluster output -raw cluster_2_token)

                - echo "Creating extra-cluster resources"
                - |
                  terraform -chdir=terraform/extra-cluster apply -auto-approve \
                    -var="cluster_1_name=${CLUSTER1}" \
                    -var="requester_cidr=${CIDR1}" \
                    -var="requester_vpc_id=${VPC1}" \
                    -var="requester_route=${ROUTE1}" \
                    -var="cluster_1_gameservers_subnets=${SUBNETS1}" \
                    -var="cluster_1_endpoint=${ENDPOINT1}" \
                    -var="cluster_1_certificate_authority_data=${AUTH1}" \
                    -var="cluster_1_token=${TOKEN1}" \
                    -var="cluster_2_name=${CLUSTER2}" \
                    -var="accepter_cidr=${CIDR2}" \
                    -var="accepter_vpc_id=${VPC2}" \
                    -var="accepter_route=${ROUTE2}" \
                    -var="cluster_2_gameservers_subnets=${SUBNETS2}" \
                    -var="cluster_2_endpoint=${ENDPOINT2}" \
                    -var="cluster_2_certificate_authority_data=${AUTH2}" \
                    -var="cluster_2_token=${TOKEN2}" \
                    -var="cluster_1_region=${REGION1}" \
                    -var="ecr_region=${REGION1}" \
                    -var="cluster_2_region=${REGION2}" \
                    -var="aws_lb_arn=${FLB_ARN}"

                - echo "Capturing Terraform output"
                - terraform -chdir=terraform/extra-cluster output > terraform_output.txt    

            post_build:
              commands:
                - echo "Build completed on $(date)"
                - echo "Terraform Output:"
                - cat terraform_output.txt
                - echo "Global Accelerator Address:"
                - grep "global_accelerator_address" terraform_output.txt | cut -d '=' -f2 | tr -d ' "'   

  CodeBuildArtifactsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub agoe-artifacts-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  CodeBuildArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CodeBuildArtifactsBucket
      PolicyDocument:
        Statement:
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - !GetAtt CodeBuildArtifactsBucket.Arn
              - !Sub ${CodeBuildArtifactsBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: "false"

  CodePipelineProject:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub AGOE-CodePipeline-${AWS::AccountId}-${AWS::Region}
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodeBuildArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: !Join
                  - "/"
                  - - !Ref RepositoryOwner
                    - !Ref RepositoryName
                BranchName: main
              OutputArtifacts:
                - Name: AdminSourceArtifact
        - Name: Build
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: AdminSourceArtifact
              OutputArtifacts:
                - Name: FinalSourceArtifacts
              Configuration:
                ProjectName: !Ref CodeBuildProject
                PrimarySource: AdminSourceArtifact

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iam:GetRole
                Resource: "*"
              # Action for CodeStar connection for GitHub (pre-requisite setup required)
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: !Ref CodeStarConnectionArn
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: !GetAtt CodeBuildProject.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codepipeline/*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codepipeline/*:log-stream:*
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:PutObject
                Resource:
                  - !GetAtt CodeBuildArtifactsBucket.Arn
                  - !Sub ${CodeBuildArtifactsBucket.Arn}/*

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:UpdateAutoScalingGroup
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:AttachNetworkInterface
                  - ec2:CreateNetworkInterface
                  - ec2:CreateSecurityGroup
                  - ec2:DeleteNetworkInterface
                  - ec2:DeleteSecurityGroup
                  - ec2:DescribeInstances
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                  - ec2:DetachNetworkInterface
                  - ec2:ModifyInstanceAttribute
                  - ec2:ModifyNetworkInterfaceAttribute
                  - ec2:AssumeRole
                Resource: "*"            
              - Effect: Allow
                Action:
                  - ecr:CreateRepository
                  - ecr:DescribeRepositories
                  - ecr:DescribeRegistry
                  - ecr:TagResource
                  - ecr:DescribeImages
                  - ecr:DescribeImageScanFindings
                  - ecr:DescribeImageTags
                  - ecr:GetLifecyclePolicyPreview
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutReplicationConfiguration
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutReplicationConfiguration
                  - ecr:ListTagsForResource
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutReplicationConfiguration
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutReplicationConfiguration
                Resource: "*"
              - Effect: Allow
                Action:
                  - globalaccelerator:CreateAccelerator
                  - globalaccelerator:DeleteAccelerator
                  - globalaccelerator:DescribeAccelerator
                  - globalaccelerator:DescribeAcceleratorAttributes
                  - globalaccelerator:ListAccelerators
                  - globalaccelerator:UpdateAccelerator
                  - globalaccelerator:UpdateAcceleratorAttributes
                  - globalaccelerator:CreateEndpointGroup
                  - globalaccelerator:DeleteEndpointGroup
                  - globalaccelerator:DescribeEndpointGroup
                  - globalaccelerator:UpdateEndpointGroup
                  - globalaccelerator:CreateListener
                  - globalaccelerator:DeleteListener
                  - globalaccelerator:DescribeListener
                  - globalaccelerator:UpdateListener
                  - globalaccelerator:ListListeners
                  - globalaccelerator:CreateCustomRoutingAccelerator
                  - globalaccelerator:CreateCustomRoutingListener
                  - globalaccelerator:DeleteCustomRoutingAccelerator
                  - globalaccelerator:DeleteCustomRoutingListener
                  - globalaccelerator:DescribeCustomRoutingAccelerator
                  - globalaccelerator:DescribeCustomRoutingListener
                  - globalaccelerator:UpdateCustomRoutingAccelerator
                  - globalaccelerator:UpdateCustomRoutingListener
                  - globalaccelerator:ListCustomRoutingAccelerators
                  - globalaccelerator:ListCustomRoutingListeners
                  - globalaccelerator:ListCustomRoutingPortMappings
                  - globalaccelerator:ListCustomRoutingPortMappingsByDestination
                  - globalaccelerator:ListTagsForResource
                  - globalaccelerator:TagResource
                  - globalaccelerator:UntagResource
                  - globalaccelerator:DescribeCustomRoutingAcceleratorAttributes
                  - globalaccelerator:UpdateCustomRoutingAcceleratorAttributes
                  - globalaccelerator:CreateCustomRoutingEndpointGroup
                  - globalaccelerator:DeleteCustomRoutingEndpointGroup
                  - globalaccelerator:DescribeCustomRoutingEndpointGroup
                  - globalaccelerator:UpdateCustomRoutingEndpointGroup
                  - globalaccelerator:ListCustomRoutingEndpointGroups
                  - globalaccelerator:ListCustomRoutingPortMappings
                  - globalaccelerator:ListCustomRoutingPortMappingsByDestination
                  - globalaccelerator:AddCustomRoutingEndpoints
                  - globalaccelerator:RemoveCustomRoutingEndpoints
                  - globalaccelerator:DescribeCustomRoutingEndpoint
                  - globalaccelerator:UpdateCustomRoutingEndpoint
                  - globalaccelerator:ListCustomRoutingEndpoints
                  - globalaccelerator:CreateRoutingPosition
                  - globalaccelerator:DeleteRoutingPosition
                  - globalaccelerator:DescribeRoutingPosition
                  - globalaccelerator:UpdateRoutingPosition
                  - globalaccelerator:ListRoutingPositions
                  - globalaccelerator:ListRoutingPositionsWithInternalStatus
                  - globalaccelerator:AllowCustomRoutingTraffic
                  - globalaccelerator:RemoveCustomRoutingTraffic
                  - globalaccelerator:ListCustomRoutingTraffic
                  - globalaccelerator:DescribeCustomRoutingTraffic
                  - globalaccelerator:UpdateCustomRoutingTraffic
                Resource: "*"
              - Effect: Allow
                Action:
                  - eks:CreateCluster
                  - eks:DescribeCluster
                  - eks:UpdateClusterVersion
                  - eks:UpdateClusterConfig
                  - eks:DeleteCluster
                  - eks:TagResource
                  - eks:CreateNodegroup 
                  - eks:DescribeNodegroup
                  - eks:DeleteNodegroup 
                  - eks:ListClusters
                  - eks:DescribeAddon
                  - eks:DescribeAddonVersions
                  - eks:CreateAddon
                  - eks:DeleteAddon
                  - eks:UpdateAddon
                  - eks:ListAddons
                  - eks:ListIdentityProviderConfigs
                  - eks:ListNodegroups
                  - eks:ListUpdates
                  - eks:DescribeUpdate
                  - eks:AccessKubernetesApi
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:TagRole
                  - iam:ListRolePolicies
                  - iam:PutRolePolicy
                  - iam:ListAttachedRolePolicies
                  - iam:GetRolePolicy
                  - iam:AttachRolePolicy
                  - iam:CreatePolicy
                  - iam:TagPolicy
                  - iam:GetPolicy
                  - iam:GetPolicyVersion
                  - iam:CreateServiceLinkedRole
                  - iam:PassRole
                  - iam:DetachRolePolicy
                  - iam:ListInstanceProfilesForRole
                  - iam:DeleteRole
                  - iam:ListPolicyVersions
                  - iam:DeletePolicy
                  - iam:DeleteRolePolicy
                  - iam:CreateOpenIDConnectProvider
                  - iam:TagOpenIDConnectProvider
                  - iam:GetOpenIDConnectProvider
                  - iam:DeleteOpenIDConnectProvider 
                Resource: "*"
              - Effect: Allow
                Action:
                  - kms:CreateKey
                  - kms:CreateAlias
                  - kms:TagResource
                  - kms:ListAliases
                  - kms:DescribeKey
                  - kms:GetKeyPolicy
                  - kms:PutKeyPolicy
                  - kms:DeleteAlias
                  - kms:ScheduleKeyDeletion
                  - kms:DeleteAlias
                  - kms:DisableKey
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DeleteStack
                  - cloudformation:GetTemplate
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:TagResource
                  - logs:PutRetentionPolicy
                  - logs:DescribeLogGroups
                  - logs:ListTagsForResource
                  - logs:DeleteLogGroup
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  - s3:GetBucketVersioning
                Resource:
                  - !GetAtt CodeBuildArtifactsBucket.Arn
                  - !Sub ${CodeBuildArtifactsBucket.Arn}/*
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:DescribeTable
                Resource: !GetAtt TerraformDynamoDBLockTable.Arn

  TerraformStateBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub agoe-state-bucket-${AWS::AccountId}-${AWS::Region}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  TerraformStateBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TerraformStateBucket
      PolicyDocument:
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: "*"
            Action: s3:PutObject
            Resource: !Sub ${TerraformStateBucket.Arn}/*
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption: AES256
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - !Sub ${TerraformStateBucket.Arn}
              - !Sub ${TerraformStateBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: "false"

  TerraformDynamoDBLockTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      TableName: !Sub agoe-state-table-lock
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: LockID
          AttributeType: S
      KeySchema:
        - AttributeName: LockID
          KeyType: HASH

Outputs:
  CodeBuildProjectName:
    Description: Name of the CodeBuild Project
    Value: !Ref CodeBuildProject

  TerraformStateBucketName:
    Description: Name of the S3 Bucket
    Value: !Ref TerraformStateBucket

  TerraformDynamoDBLockTableName:
    Description: Name of the DynamoDB Table
    Value: !Ref TerraformDynamoDBLockTable
