version: 0.2
env:
  variables:
    REGION: $AWS_REGION
    MAX_RETRIES: 5
    RETRY_DELAY: 5
phases:
  install:
    commands:
      - echo Installing dependencies...
      - sudo yum install -y yum-utils shadow-utils
      - sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
      - sudo yum -y install terraform
      - terraform --version

      - echo "Installing Helm..."
      - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
      - chmod 700 get_helm.sh
      - ./get_helm.sh
      - helm version

      - echo "Installing jq..."
      - sudo yum install -y jq

      - echo Installing GetText...
      - sudo yum install -y gettext
      - gettext --version

      - echo Installing Go...
      - sudo yum install -y golang
      - go version

      - echo "Installing kubectl..."
      - curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.0/2023-04-19/bin/linux/amd64/kubectl
      - chmod +x ./kubectl
      - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
      - echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
      - kubectl version --short --client

      - echo "Checking Docker version..."
      - docker version

      - echo "Checking OpenSSL version..."
      - openssl version

  pre_build:
    commands:
      - echo Checking out repositories...
      - echo "Listing contents of CODEBUILD_SRC_DIR"
      - ls -la $CODEBUILD_SRC_DIR
  build:
    commands:
      - echo "Initializing Terraform for cluster creation..."
      - |
        terraform -chdir=terraform/cluster init \
          -backend-config="bucket=${TERRAFORM_STATE_BUCKET}" \
          -backend-config="key=${TF_STATE_KEY}" \
          -backend-config="region=${AWS_REGION}" \
          -backend-config="dynamodb_table=${TERRAFORM_DYNAMO_TABLE}" \
          -backend-config="encrypt=true"

      - echo "Creating both clusters..."
      - |
        terraform -chdir=terraform/cluster apply -auto-approve \
          -var="cluster_1_name=${CLUSTER1}" \
          -var="cluster_1_region=${REGION1}" \
          -var="cluster_1_cidr=${CIDR1}" \
          -var="cluster_2_name=${CLUSTER2}" \
          -var="cluster_2_region=${REGION2}" \
          -var="cluster_2_cidr=${CIDR2}" \
          -var="cluster_version=${VERSION}"

      - echo "Step 2 - Terraform Intra-Cluster"
      - echo "Initializing Terraform for intra-cluster configuration..."
      - |
        terraform -chdir=terraform/intra-cluster init \
          -backend-config="bucket=${TERRAFORM_STATE_BUCKET}" \
          -backend-config="key=intra-cluster-${TF_STATE_KEY}" \
          -backend-config="region=${AWS_REGION}" \
          -backend-config="dynamodb_table=${TERRAFORM_DYNAMO_TABLE}" \
          -backend-config="encrypt=true"

      - echo "Deploying to the first cluster (${CLUSTER1})..."
      - |
        terraform -chdir=terraform/intra-cluster workspace select -or-create=true ${REGION1} &&
        terraform -chdir=terraform/intra-cluster apply -auto-approve \
          -var="cluster_name=${CLUSTER1}" \
          -var="cluster_region=${REGION1}" \
          -var="cluster_endpoint=$(terraform -chdir=terraform/cluster output -raw cluster_1_endpoint)" \
          -var="cluster_certificate_authority_data=$(terraform -chdir=terraform/cluster output -raw cluster_1_certificate_authority_data)" \
          -var="cluster_token=$(terraform -chdir=terraform/cluster output -raw cluster_1_token)" \
          -var="cluster_version=${VERSION}" \
          -var="oidc_provider_arn=$(terraform -chdir=terraform/cluster output -raw oidc_provider_1_arn)" \
          -var="namespaces=[\"agones-openmatch\", \"agones-system\", \"gameservers\", \"open-match\"]" \
          -var="configure_agones=true" \
          -var="configure_open_match=true"

      - echo "Deploying to the second cluster (${CLUSTER2})..."
      - |
        terraform -chdir=terraform/intra-cluster workspace select -or-create=true ${REGION2} &&
        terraform -chdir=terraform/intra-cluster apply -auto-approve \
          -var="cluster_name=${CLUSTER2}" \
          -var="cluster_region=${REGION2}" \
          -var="cluster_endpoint=$(terraform -chdir=terraform/cluster output -raw cluster_2_endpoint)" \
          -var="cluster_certificate_authority_data=$(terraform -chdir=terraform/cluster output -raw cluster_2_certificate_authority_data)" \
          -var="cluster_token=$(terraform -chdir=terraform/cluster output -raw cluster_2_token)" \
          -var="cluster_version=${VERSION}" \
          -var="oidc_provider_arn=$(terraform -chdir=terraform/cluster output -raw oidc_provider_2_arn)" \
          -var="namespaces=[\"agones-system\", \"gameservers\"]" \
          -var="configure_agones=true" \
          -var="configure_open_match=false"

      - echo "Fetching the load balancer ARN..."

      - echo "Updating kubeconfig for Cluster 1..."
      - aws eks --region ${REGION1} update-kubeconfig --name ${CLUSTER1}
      - kubectl config use-context arn:aws:eks:${REGION1}:$(aws sts get-caller-identity --query Account --output text):cluster/${CLUSTER1}

      - echo "Verifying current context..."
      - kubectl config current-context

      - echo "Setting the Open Match service name"
      - export OPEN_MATCH_SVC_NAME=$CLUSTER1-om-fe
      - echo "OPEN_MATCH_SVC_NAME=$OPEN_MATCH_SVC_NAME"

      - echo "Setting the name of the Load balancer"
      - |
        export FLB_NAME=$(kubectl get services -n open-match -o json | jq -r --arg OPEN_MATCH_SVC_NAME "$OPEN_MATCH_SVC_NAME" '.items[] | select(.metadata.name==$OPEN_MATCH_SVC_NAME) | .status.loadBalancer.ingress[0].hostname')
      - echo "FLB_NAME=$FLB_NAME"
      - echo "Retrieving the ARN of the load balancer"
      - |
        export FLB_ARN=$(aws elbv2 describe-load-balancers --region ${REGION1} | jq -r ".LoadBalancers[] | select(.DNSName==\"$FLB_NAME\") | .LoadBalancerArn")
      - echo "FLB_ARN=$FLB_ARN"
      - echo "Initializing Terraform for extra-cluster configuration"
      - |
        terraform -chdir=terraform/extra-cluster init \
          -backend-config="bucket=${TERRAFORM_STATE_BUCKET}" \
          -backend-config="key=extra-cluster-${TF_STATE_KEY}" \
          -backend-config="region=${AWS_REGION}" \
          -backend-config="dynamodb_table=${TERRAFORM_DYNAMO_TABLE}" \
          -backend-config="encrypt=true"

      - echo "Getting values needed by Terraform"
      - export VPC1=$(terraform -chdir=terraform/cluster output -raw vpc_1_id)
      - export SUBNETS1=$(terraform -chdir=terraform/cluster output gameservers_1_subnets)
      - export ROUTE1=$(terraform -chdir=terraform/cluster output -raw private_route_table_1_id)
      - export ENDPOINT1=$(terraform -chdir=terraform/cluster output -raw cluster_2_endpoint)
      - export AUTH1=$(terraform -chdir=terraform/cluster output -raw cluster_1_certificate_authority_data)
      - export TOKEN1=$(terraform -chdir=terraform/cluster output -raw cluster_1_token)
      - export VPC2=$(terraform -chdir=terraform/cluster output -raw vpc_2_id)
      - export SUBNETS2=$(terraform -chdir=terraform/cluster output gameservers_2_subnets)
      - export ROUTE2=$(terraform -chdir=terraform/cluster output -raw private_route_table_2_id)
      - export ENDPOINT2=$(terraform -chdir=terraform/cluster output -raw cluster_2_endpoint)
      - export AUTH2=$(terraform -chdir=terraform/cluster output -raw cluster_2_certificate_authority_data)
      - export TOKEN2=$(terraform -chdir=terraform/cluster output -raw cluster_2_token)

      - echo "Creating extra-cluster resources"
      - |
        terraform -chdir=terraform/extra-cluster apply -auto-approve \
          -var="cluster_1_name=${CLUSTER1}" \
          -var="requester_cidr=${CIDR1}" \
          -var="requester_vpc_id=${VPC1}" \
          -var="requester_route=${ROUTE1}" \
          -var="cluster_1_gameservers_subnets=${SUBNETS1}" \
          -var="cluster_1_endpoint=${ENDPOINT1}" \
          -var="cluster_1_certificate_authority_data=${AUTH1}" \
          -var="cluster_1_token=${TOKEN1}" \
          -var="cluster_2_name=${CLUSTER2}" \
          -var="accepter_cidr=${CIDR2}" \
          -var="accepter_vpc_id=${VPC2}" \
          -var="accepter_route=${ROUTE2}" \
          -var="cluster_2_gameservers_subnets=${SUBNETS2}" \
          -var="cluster_2_endpoint=${ENDPOINT2}" \
          -var="cluster_2_certificate_authority_data=${AUTH2}" \
          -var="cluster_2_token=${TOKEN2}" \
          -var="cluster_1_region=${REGION1}" \
          -var="ecr_region=${REGION1}" \
          -var="cluster_2_region=${REGION2}" \
          -var="aws_lb_arn=${FLB_ARN}"

      - echo "Capturing Terraform output"
      - terraform -chdir=terraform/extra-cluster output > terraform_output.txt

      - echo "Building and deploying game server fleets..."
      - |
        chmod +x scripts/deploy-ncat-fleets.sh
        sh scripts/deploy-ncat-fleets.sh ${CLUSTER1} ${REGION1} ${CLUSTER2} ${REGION2}

      - echo "Integrating Open Match with Agones..."
      - |
        cd $CODEBUILD_SRC_DIR
        kubectl config use-context $(kubectl config get-contexts -o=name | grep ${CLUSTER1})
        sh scripts/deploy-matchfunction.sh ${CLUSTER1} ${REGION1}
        sh scripts/deploy-director.sh ${CLUSTER1} ${REGION1} ${REGION2}
        kubectl get pods -n agones-openmatch
      - echo "Open Match integration with Agones completed."

  post_build:
    commands:
      - echo "Build completed on $(date)"
      - echo "Terraform Output:"
      - cat terraform_output.txt
      - echo "Global Accelerator Address:"
      - grep "global_accelerator_address" terraform_output.txt | cut -d '=' -f2 | tr -d ' "'
